package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"os"

	"github.com/kobaryubi/go-todo/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoInput) (*model.Todo, error) {
	var todo model.Todo
	
	err := r.pool.QueryRow(
		ctx,
		"INSERT INTO todos (title) VALUES ($1) RETURNING id, title",
		input.Title,
	).Scan(&todo.ID, &todo.Title)
	if err != nil {
		os.Exit(1)
	}

	return &todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	rows, err := r.pool.Query(ctx, "SELECT id, title FROM todos")
	if err != nil {
		os.Exit(1)
	}

	defer rows.Close()

	var todos []*model.Todo

	for rows.Next() {
		var todo model.Todo
		err := rows.Scan(&todo.ID, &todo.Title)
		if err != nil {
			continue
		}

		todos = append(todos, &todo)
	}

	if rows.Err() != nil {
		os.Exit(1)
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
