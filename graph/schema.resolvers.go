package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"os"

	"github.com/kobaryubi/go-todo/graph/model"
	"github.com/kobaryubi/go-todo/internal/pkg/jwt"
	"github.com/kobaryubi/go-todo/internal/users"
	"golang.org/x/crypto/bcrypt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoInput) (*model.Todo, error) {
	tx, err := r.pool.Begin(ctx)
	if err != nil {
		os.Exit(1)
	}
	defer tx.Rollback(ctx)

	var todo model.Todo

	if err := r.pool.QueryRow(
		ctx,
		"INSERT INTO todos (title) VALUES ($1) RETURNING id, title",
		input.Title,
	).Scan(&todo.ID, &todo.Title); err != nil {
		os.Exit(1)
	}

	if err := tx.Commit(ctx); err != nil {
		os.Exit(1)
	}

	return &todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	tx, err := r.pool.Begin(ctx)
	if err != nil {
		os.Exit(1)
	}
	defer tx.Rollback(ctx)

	hashedPassword, err := users.HashPassword(input.Password)
	if err != nil {
		os.Exit(1)
	}

	var user model.User

	if err := r.pool.QueryRow(
		ctx,
		"INSERT INTO users (name, password) VALUES ($1, $2) RETURNING id, name",
		input.Name,
		hashedPassword,
	).Scan(&user.ID, &user.Name); err != nil {
		os.Exit(1)
	}

	if err := tx.Commit(ctx); err != nil {
		os.Exit(1)
	}

	return &user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	var (
		user           model.User
		hashedPassword string
	)
	if err := r.pool.QueryRow(ctx, "SELECT id, name, password FROM users WHERE name = $1", input.Name).Scan(&user.ID, &user.Name, &hashedPassword); err != nil {
		os.Exit(1)
	}

	if err := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(input.Password)); err != nil {
		os.Exit(1)
	}

	token, err := jwt.CreateToken(user.Name)
	if err != nil {
		os.Exit(1)
	}

	return &model.AuthPayload{
		Token: token,
		User:  &user,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	rows, err := r.pool.Query(ctx, "SELECT id, title, done FROM todos")
	if err != nil {
		os.Exit(1)
	}

	defer rows.Close()

	var todos []*model.Todo

	for rows.Next() {
		var todo model.Todo
		err := rows.Scan(&todo.ID, &todo.Title, &todo.Done)
		if err != nil {
			continue
		}

		todos = append(todos, &todo)
	}

	if rows.Err() != nil {
		os.Exit(1)
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
